// Code generated by go-bindata.
// sources:
// templates/items/edit.html
// templates/items/item.html
// templates/items/items.html
// templates/items/new.html
// templates/users/edit.html
// templates/users/new.html
// templates/users/user.html
// templates/users/users.html
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesItemsEditHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcf\x4e\x1b\x31\x10\xc6\xef\x79\x8a\xa9\x4f\x89\x44\xb2\xe5\x56\x89\x75\xa4\x16\x42\x8b\x04\x85\xb6\x41\xa2\x47\xc7\x9e\x6c\xac\x7a\xed\xc5\x3b\x5e\x1a\x10\xef\x5e\x39\xfb\x27\xd9\x44\x41\xd4\x97\x38\xe3\x6f\x7e\xf6\xcc\x37\xda\xf4\xc3\xc5\xed\xf9\xfc\xf7\xdd\x0c\x56\x94\x9b\xe9\x20\x8d\x3f\x60\x84\xcd\x38\x43\xcb\x62\x00\x85\x9a\x0e\x00\x00\xd2\x1c\x49\x80\x5c\x09\x5f\x22\x71\x76\x3f\xbf\x1c\x7f\x62\xbb\x47\x56\xe4\xc8\x59\xa5\xf1\xa9\x70\x9e\x18\x48\x67\x09\x2d\x71\xf6\xa4\x15\xad\xb8\xc2\x4a\x4b\x1c\x6f\xfe\x9c\x80\xb6\x9a\xb4\x30\xe3\x52\x0a\x83\xfc\x74\xf2\xb1\x87\x5a\x11\x15\x63\x7c\x0c\xba\xe2\xec\x61\x7c\xff\x79\x7c\xee\xf2\x42\x90\x5e\x18\xdc\xe1\x6a\xe4\xa8\x32\x6c\x33\x49\x93\xc1\xe9\x4c\x69\x82\x2b\xc2\x3c\x4d\xea\xc0\x20\x4d\xea\x22\xd2\x85\x53\xeb\x5a\x7b\x2e\x08\x33\xe7\xd7\x75\xe2\xc2\x37\x04\x6d\x8b\x40\x40\xeb\x02\x39\x23\xfc\x4b\x0c\xb4\xe2\x4c\x36\xe2\x79\x8c\x4c\xbb\x94\x2e\xed\x2b\x5a\x85\x7e\x0f\xa5\x74\x35\x85\x9d\x35\x68\x37\xbd\x4b\xbc\x50\xda\xb1\xa6\x73\xd9\x86\xc3\xa0\x12\x26\x20\x67\xb9\x30\x6d\x69\x71\xdd\x08\x83\x5b\x48\x7b\xcf\x7f\x11\x97\xb8\xc7\xbc\xdc\x04\xea\x07\x27\xf1\xc5\xfd\x22\x7e\xe9\x67\x7c\x57\x87\x4a\xfd\x8c\x7b\xdd\xd9\xe6\xfc\x08\xc2\x92\xa6\xf7\xf5\xfa\xb1\x11\x1f\xeb\xf5\x85\x77\x85\x5b\x2e\xe1\xda\x49\x41\xda\xd9\x77\x41\x4d\x23\x3e\x06\x4d\x17\x81\xc8\xd9\x26\xaf\x0c\x8b\x5c\x13\x03\x67\xa5\xd1\xf2\x0f\x67\xa1\x50\x82\x30\x8e\x14\x9b\xa6\x49\xad\x8d\x53\x55\x8f\x53\x5a\x4a\xaf\x0b\xaa\x49\x95\xf0\xb0\x95\x03\x87\x65\xb0\x32\x5e\x3d\x1c\xbd\x74\x5d\x8f\xa2\x42\xac\x8d\x13\x0a\x38\xbc\xbc\x76\x07\x4d\x70\xd2\x4e\x27\x70\x50\x4e\x86\x1c\x2d\x4d\x32\xa4\x99\xc1\xb8\xfd\xb2\xbe\x52\xc3\xfe\x50\x8e\x26\x1b\x87\xcf\x0e\x48\xd1\xc1\xb7\x28\x9d\x71\x47\x09\xad\x7b\x6f\x51\x7a\xa6\x1d\x25\x35\xd6\xb5\xce\xbd\x05\xec\x19\x76\x00\x94\xce\x96\xce\xe0\xc4\xb8\x6c\xd8\xc0\x47\x67\xbd\xee\x7a\x7c\x0c\x58\x12\x70\xb0\xf8\x04\x0f\x37\xd7\xdf\x88\x8a\x9f\x75\x70\xb8\xa3\x6d\x74\x13\x57\xa0\x1d\xb2\xbb\xfb\x39\x3b\x01\x96\x54\xa7\x89\x26\xcc\x4b\x76\x02\xe4\x03\x8e\x0e\xe5\xd6\xa3\x50\xeb\x92\x04\xa1\x5c\x09\x9b\x61\xcf\x69\xd8\x5a\x1d\x97\x5e\xc2\xb0\xcd\x8c\x29\xa1\x04\xce\x79\x07\xbb\xb8\xfd\x3e\xdb\x4f\xd9\xaf\xb2\xd5\x7a\x2c\x0b\x67\x71\xa7\x82\xb8\xb6\x03\xf4\x7a\xf0\xd4\x12\xad\xea\x9a\xb4\x39\x7d\x3d\x1b\xa4\x49\x3b\xb3\x69\xb2\xf9\xee\xff\x0b\x00\x00\xff\xff\x05\x62\xa9\x6b\x07\x06\x00\x00")

func templatesItemsEditHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesItemsEditHtml,
		"templates/items/edit.html",
	)
}

func templatesItemsEditHtml() (*asset, error) {
	bytes, err := templatesItemsEditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/items/edit.html", size: 1543, mode: os.FileMode(436), modTime: time.Unix(1523985550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesItemsItemHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xcf\x6a\xf3\x30\x10\xc4\xef\x7e\x0a\x7d\x3a\x7f\x8e\xdb\x9c\x4a\x91\x0c\x25\x6e\x4b\xa0\xd0\x7f\x09\xb4\xc7\x8d\xbd\xb1\x17\x64\xc9\x91\x37\x09\x69\xf0\xbb\x17\xc7\x36\x24\xb8\x39\x09\xcd\xcc\x6f\x90\x96\x55\xff\x92\xd7\xd9\xe2\xfb\xed\x51\x14\x5c\x9a\x38\x50\xed\x21\x0c\xd8\x5c\x4b\xb4\xb2\x15\x10\xb2\x38\x10\x42\x08\x55\x22\x83\x48\x0b\xf0\x35\xb2\x96\xcb\xc5\x53\x78\x27\xcf\x2d\x0b\x25\x6a\xb9\x23\xdc\x57\xce\xb3\x14\xa9\xb3\x8c\x96\xb5\xdc\x53\xc6\x85\xce\x70\x47\x29\x86\xa7\xcb\x7f\x41\x96\x98\xc0\x84\x75\x0a\x06\xf5\xed\xe4\xe6\xa2\xaa\x60\xae\x42\xdc\x6c\x69\xa7\xe5\x57\xb8\x7c\x08\x67\xae\xac\x80\x69\x65\xf0\xac\x97\x50\x63\x96\xe3\x40\x32\xb1\xc1\x78\xce\x58\x8a\x04\xeb\xd4\x53\xc5\xe4\xac\x8a\x3a\x3d\x50\x51\xf7\x17\xb5\x72\xd9\xa1\x47\x8a\x69\x97\xff\xc0\xcd\x16\x6b\x16\x09\x32\x90\x51\x51\x31\xed\x03\x35\x7b\x67\xf3\x78\x06\x8c\xb9\xf3\x87\x7b\x15\xf5\xca\xc9\x3e\x1e\x27\x83\xd3\x34\x1d\xb0\xf2\x97\xe4\x33\xda\x0c\xfd\x98\xeb\xf4\x6b\xd4\x27\xfd\xe0\x98\x69\xd5\x6b\xc4\xfb\x16\x2c\x13\xff\xf1\xc2\xc1\xb9\x46\x26\xde\x55\x6e\xbd\x16\x2f\x2e\x85\x76\x60\xe3\x86\x3e\x31\x04\x86\xa2\x3e\x35\x4f\xc6\xc4\x3c\x69\x9a\x40\x45\xdd\xa4\x55\x74\x5a\xae\xdf\x00\x00\x00\xff\xff\x33\x37\xfc\x71\x6c\x02\x00\x00")

func templatesItemsItemHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesItemsItemHtml,
		"templates/items/item.html",
	)
}

func templatesItemsItemHtml() (*asset, error) {
	bytes, err := templatesItemsItemHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/items/item.html", size: 620, mode: os.FileMode(436), modTime: time.Unix(1524014391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesItemsItemsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6b\xeb\x30\x0c\xc7\xef\xfd\x14\x7a\xa6\xc7\xa6\x7e\xef\xf6\x18\x76\x60\xb4\xdb\x2e\x83\x6d\xac\x85\xed\xe8\xc6\x6a\x62\x48\xec\x2c\x55\xdb\x75\x21\xdf\x7d\xb8\x69\xd6\x24\x1b\xa3\x94\xea\x12\x24\xeb\xff\x47\xd6\x8f\x58\xfc\x99\x3e\x4c\x66\xaf\x8f\x37\x90\x50\x96\x86\x03\xe1\x3f\x90\x2a\x1b\x4b\x86\x96\xf9\x02\x2a\x1d\x0e\x00\x00\x44\x86\xa4\x20\x4a\x54\xb1\x42\x92\x6c\x3e\xbb\x0d\xfe\xb3\xf6\x91\x55\x19\x4a\xb6\x31\xb8\xcd\x5d\x41\x0c\x22\x67\x09\x2d\x49\xb6\x35\x9a\x12\xa9\x71\x63\x22\x0c\xf6\xc9\x08\x8c\x35\x64\x54\x1a\xac\x22\x95\xa2\xfc\x37\xfe\xdb\xb1\x4a\x88\xf2\x00\xdf\xd6\x66\x23\xd9\x4b\x30\xbf\x0e\x26\x2e\xcb\x15\x99\x45\x8a\x2d\x5f\x83\x12\x75\x8c\x8d\x92\x0c\xa5\x18\x4e\x5d\xb4\xce\xd0\x92\xe0\x75\x3e\x10\xbc\xbe\x83\x58\x38\xbd\x6b\x5a\xd5\xc2\x1f\xc1\x21\x04\x1d\xaf\xd9\xaa\x75\x0b\x3e\x26\x8a\x30\x76\xc5\xae\xdb\xc9\xfb\xad\x3f\x6a\xef\xd0\x6a\x2c\xce\x51\x3e\x9b\x0f\x3c\x47\xf7\xb4\x56\x96\x0c\x9d\x35\xed\xb4\x70\xb9\x5b\x2e\xe1\xde\x45\x8a\x8c\xb3\xbf\x78\xf8\xac\xb3\x3e\x41\xc7\x55\x37\x51\x96\x85\xb2\x31\xc2\xd0\x58\x8d\xef\x23\x18\x62\x8a\x1e\x13\x5c\x49\x18\x43\x55\xf5\x26\x2a\xbe\x4f\x24\x48\x87\x65\xf9\x25\x1c\x37\x2c\xa0\xaa\x04\xa7\x3e\x3d\xde\xb7\x38\xc9\xb3\x66\x74\x49\x47\xcf\xee\x92\x7e\x0d\xd3\x4b\x7a\x1e\x58\x37\xa8\x4f\xb4\x2e\x4b\xb4\xba\x05\x4e\xf0\x16\x76\xc1\x0f\xbf\x98\xe0\x75\x51\xf0\xfd\x0b\xf3\x19\x00\x00\xff\xff\xaf\x92\xbe\x54\x71\x04\x00\x00")

func templatesItemsItemsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesItemsItemsHtml,
		"templates/items/items.html",
	)
}

func templatesItemsItemsHtml() (*asset, error) {
	bytes, err := templatesItemsItemsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/items/items.html", size: 1137, mode: os.FileMode(436), modTime: time.Unix(1523985550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesItemsNewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x4d\x6f\xd3\x40\x10\xbd\xe7\x57\x0c\x73\xc6\x18\x6e\x1c\x76\x2d\xa1\xb4\x45\x48\xa0\x16\x35\x95\xe0\xb8\xf6\x4e\xe2\x91\xf6\xc3\xb5\xc7\x2e\xe9\xaf\x47\x9b\x2c\xd4\x96\x52\x55\x9e\x8b\xb5\x6f\xfd\xde\xf8\xcd\x3c\xab\x77\x57\xb7\xdb\xdd\xef\xbb\x6b\x68\xc5\xbb\x6a\xa3\xd2\x03\x9c\x09\x07\x8d\x14\x30\x01\x64\x6c\xb5\x01\x00\x50\x9e\xc4\x40\xd3\x9a\x7e\x20\xd1\xf8\xb0\xbb\x29\x3e\xe3\xfc\x2a\x18\x4f\x1a\x27\xa6\xa7\x2e\xf6\x82\xd0\xc4\x20\x14\x44\xe3\x13\x5b\x69\xb5\xa5\x89\x1b\x2a\x4e\x87\xf7\xc0\x81\x85\x8d\x2b\x86\xc6\x38\xd2\x9f\x3e\x7c\x5c\x48\xb5\x22\x5d\x41\x8f\x23\x4f\x1a\x7f\x15\x0f\x5f\x8a\x6d\xf4\x9d\x11\xae\x1d\xcd\x74\x99\x34\xd9\x03\xfd\x63\x0a\x8b\xa3\xea\xda\xb2\xc0\x37\x21\xaf\xca\x33\xb0\x51\xe5\xd9\x84\xaa\xa3\x3d\xe6\x77\xf7\xb1\xf7\x60\x1a\xe1\x18\x34\x96\x2c\xe4\x87\x12\xc1\x93\xb4\xd1\x6a\xbc\xbb\xbd\xdf\x65\xd5\x54\x5b\x23\x74\x88\xfd\xf1\x3f\xa0\xea\xfe\xe5\x56\x71\xe8\x46\x01\x39\x76\xa4\x51\xe8\x8f\x20\xb0\xd5\xd8\x64\xd2\x2e\x21\xd5\x82\xba\xa0\x7f\xa5\x60\xa9\x7f\x45\xda\xf2\x54\xc1\xac\x36\xf3\xc3\xa2\x71\x6f\x2c\x47\xcc\x3b\x38\x9c\x34\x11\x26\xe3\x46\xd2\xe8\x8d\xa3\xd9\x27\xa4\xfa\x61\x1c\x2d\xc5\xe6\x7d\x57\xa9\xef\xe9\x82\xfe\xcd\x09\x7c\x31\x52\x26\x27\x97\x4d\xde\xf3\x33\xad\x9a\xec\xc0\xcf\x74\x61\xaa\x4b\xee\xcf\xd1\x04\x61\x59\xb7\xb3\xc7\x4c\x7a\x6b\x67\x57\x7d\xec\xe2\x7e\x0f\xdf\x63\x63\x52\x84\x56\x35\x71\x99\xf4\x56\x13\x55\x8f\x22\x31\x64\xfe\x30\xd6\x9e\x05\x2b\x55\x9e\xe1\x9c\xe3\x32\x05\x39\x45\xfc\x9c\x6d\x55\x9e\xfe\xe3\xbf\x01\x00\x00\xff\xff\x53\xfb\x18\x87\xd7\x03\x00\x00")

func templatesItemsNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesItemsNewHtml,
		"templates/items/new.html",
	)
}

func templatesItemsNewHtml() (*asset, error) {
	bytes, err := templatesItemsNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/items/new.html", size: 983, mode: os.FileMode(436), modTime: time.Unix(1523985550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsersEditHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesUsersEditHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsersEditHtml,
		"templates/users/edit.html",
	)
}

func templatesUsersEditHtml() (*asset, error) {
	bytes, err := templatesUsersEditHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/users/edit.html", size: 0, mode: os.FileMode(436), modTime: time.Unix(1524014391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsersNewHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x8f\xd3\x30\x10\xc5\xef\xfd\x14\x83\xcf\x84\xc0\x8d\x83\x1d\x69\x55\x96\x13\xd2\x46\xda\x54\x82\xe3\x24\x9e\xdd\x8c\xe4\x3f\xc1\x9e\xb4\xec\xb7\x47\x6e\x52\x68\x24\xa4\xd2\x5c\x22\xcf\xe4\xf7\x9e\x67\xf4\xa2\xdf\x7d\x79\xda\x77\x3f\xda\x47\x18\xc5\xbb\x66\xa7\xcb\x0b\x1c\x86\x57\xa3\x28\xa8\x52\x20\xb4\xcd\x0e\x00\x40\x7b\x12\x84\x61\xc4\x94\x49\x8c\x3a\x74\x5f\xab\xcf\xea\xba\x15\xd0\x93\x51\x47\xa6\xd3\x14\x93\x28\x18\x62\x10\x0a\x62\xd4\x89\xad\x8c\xc6\xd2\x91\x07\xaa\xce\x87\xf7\xc0\x81\x85\xd1\x55\x79\x40\x47\xe6\xd3\x87\x8f\x1b\xa9\x51\x64\xaa\xe8\xe7\xcc\x47\xa3\xbe\x57\x87\x87\x6a\x1f\xfd\x84\xc2\xbd\xa3\x2b\x5d\x26\x43\xf6\x95\x2e\xa4\xb0\x38\x6a\xf6\x89\x50\x08\x9e\xd1\x63\x62\xc1\x00\x6d\x8a\x2f\xec\x48\xd7\x4b\x7f\xa7\xeb\x65\x26\xdd\x47\xfb\xb6\xa2\x2f\x31\x79\xc0\x41\x38\x06\xa3\xea\x39\x53\xca\xb5\x02\x4f\x32\x46\x6b\x54\xfb\xf4\xdc\xad\x26\xe5\x39\x64\x4a\x65\xd6\x3f\x05\xdd\xa7\xbf\x5d\xcd\x61\x9a\x05\xe4\x6d\x22\xa3\x84\x7e\x89\x02\xb6\x46\xcd\x2b\xd4\x95\x4a\xb3\x41\x37\x78\x8b\x39\x9f\x62\xb2\xff\x21\x3e\xad\x9f\x2e\x06\x97\xd3\x3f\x0c\xb6\x1a\xdf\xe2\x80\x65\xd0\xbb\xae\xef\x56\xe8\xd6\xf5\x1f\x3d\xb2\x83\x07\x6b\x13\xe5\x7c\x97\x03\x15\xf2\xe6\x76\xc6\x18\xee\xdb\xfb\x54\x88\x5b\xb2\xba\x9f\x45\x62\x58\xe1\x3c\xf7\x9e\x45\x35\xba\x5e\xca\x6b\x46\xea\x12\x92\x12\x9f\x25\x37\xba\x3e\xff\x32\xbf\x03\x00\x00\xff\xff\x6e\x61\x6d\xf5\x42\x03\x00\x00")

func templatesUsersNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsersNewHtml,
		"templates/users/new.html",
	)
}

func templatesUsersNewHtml() (*asset, error) {
	bytes, err := templatesUsersNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/users/new.html", size: 834, mode: os.FileMode(436), modTime: time.Unix(1524014391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsersUserHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\x5d\x4b\xc3\x30\x14\x86\xef\xfb\x2b\x62\xae\xed\xaa\xbb\x12\x49\x0a\xb2\x2a\x0c\x44\x07\x6e\xa0\x97\x67\xe9\x71\x39\x90\x8f\x9a\x1e\x37\x64\xf4\xbf\x4b\xd7\x0e\x3a\x76\x15\x72\x9e\x3c\x87\xf7\x25\xea\xa6\x7a\x5f\xac\xbf\x56\xcf\xc2\xb2\x77\x65\xa6\xfa\x43\x38\x08\x3b\x2d\x31\xc8\x7e\x80\x50\x97\x99\x10\x42\x28\x8f\x0c\xc2\x58\x48\x2d\xb2\x96\x9b\xf5\x4b\xfe\x20\xa7\x28\x80\x47\x2d\xf7\x84\x87\x26\x26\x96\xc2\xc4\xc0\x18\x58\xcb\x03\xd5\x6c\x75\x8d\x7b\x32\x98\x9f\x2e\xb7\x82\x02\x31\x81\xcb\x5b\x03\x0e\xf5\xfd\xec\xee\x62\x95\x65\x6e\x72\xfc\xf9\xa5\xbd\x96\x9f\xf9\xe6\x29\x5f\x44\xdf\x00\xd3\xd6\xe1\x64\x2f\xa1\xc6\x7a\x87\x67\x93\x89\x1d\x96\x1f\xe0\x21\x11\x43\x10\x15\xb6\x26\x51\xc3\x14\x83\x2a\x06\x98\xa9\x62\x28\xa4\xb6\xb1\xfe\x1b\x3d\x3b\x9f\x48\xab\x14\xbf\xc9\xa1\x2a\xec\x7c\xc4\x2d\xa7\x18\x76\xe5\xa6\xc5\x24\xde\xc0\xe3\xa3\x2a\xc6\xd1\x89\x1f\x8f\xb3\x1e\xf5\xe5\xbb\x6e\x30\xb6\xe9\x52\x7d\x8d\x06\xfa\x14\xd7\xe6\x99\x9c\xcd\x11\x2f\xab\xeb\xa7\xcb\xaa\xeb\x32\x55\x0c\xb9\x55\x71\xfa\xaf\xff\x00\x00\x00\xff\xff\x69\x1b\xc4\xa9\xbf\x01\x00\x00")

func templatesUsersUserHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsersUserHtml,
		"templates/users/user.html",
	)
}

func templatesUsersUserHtml() (*asset, error) {
	bytes, err := templatesUsersUserHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/users/user.html", size: 447, mode: os.FileMode(436), modTime: time.Unix(1524014391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsersUsersHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x4e\xc3\x30\x0c\xbd\xef\x2b\x4c\xb4\xe3\xba\xc0\x0d\x21\xa7\xd2\x34\xe0\x84\x04\x87\x4d\x82\x63\xd6\x58\x6b\xa4\x34\x1d\xad\xd9\x40\x51\xff\x1d\x65\x5d\x59\x5b\x10\x9a\x2f\x91\x9f\xfd\x9e\xde\x4b\x82\x57\xf7\xcf\xcb\xd5\xdb\xcb\x03\xe4\x5c\xb8\x74\x82\xf1\x00\xa7\xfd\x56\x09\xf2\x22\x02\xa4\x4d\x3a\x01\x00\xc0\x82\x58\x43\x96\xeb\xaa\x26\x56\x62\xbd\x7a\x4c\x6e\x45\x7f\xe4\x75\x41\x4a\xec\x2d\x1d\x76\x65\xc5\x02\xb2\xd2\x33\x79\x56\xe2\x60\x0d\xe7\xca\xd0\xde\x66\x94\x1c\x9b\x19\x58\x6f\xd9\x6a\x97\xd4\x99\x76\xa4\x6e\xe6\xd7\x03\xa9\x9c\x79\x97\xd0\xfb\x87\xdd\x2b\xf1\x9a\xac\x17\xc9\xb2\x2c\x76\x9a\xed\xc6\x51\x4f\xd7\x92\x22\xb3\xa5\x8e\xc9\x96\x1d\xa5\x0b\xe7\x60\x5d\x53\x55\xa3\x6c\x81\x09\xca\x36\x04\x6e\x4a\xf3\xd5\xed\xea\x4d\x1c\xc1\xa9\x90\xcf\x39\x7b\xd8\x10\x88\x15\x95\x63\xce\xe1\xa6\x1c\xaf\xfe\xc9\x7d\x2a\x33\xcd\xb6\xf4\xff\x70\x63\x37\x30\x82\x7c\x36\xdd\x55\x08\x95\xf6\x5b\x82\xa9\xf5\x86\x3e\x67\x30\x25\x47\x05\x79\x86\x3b\x05\x73\x68\x9a\x91\x93\xea\xb7\x13\x64\x93\x86\xf0\x43\x9c\x77\xa9\xa0\x69\x50\xf2\xf8\x1e\xe4\x58\xe2\x22\xcd\x2e\xed\x85\x9a\x21\x90\x37\x3d\xef\x28\x7b\xc9\x51\x9e\xde\x0b\x65\x0b\xa2\x3c\xfe\xd7\xef\x00\x00\x00\xff\xff\xf0\xa2\x5f\x99\xbf\x02\x00\x00")

func templatesUsersUsersHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsersUsersHtml,
		"templates/users/users.html",
	)
}

func templatesUsersUsersHtml() (*asset, error) {
	bytes, err := templatesUsersUsersHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/users/users.html", size: 703, mode: os.FileMode(436), modTime: time.Unix(1524014391, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/items/edit.html": templatesItemsEditHtml,
	"templates/items/item.html": templatesItemsItemHtml,
	"templates/items/items.html": templatesItemsItemsHtml,
	"templates/items/new.html": templatesItemsNewHtml,
	"templates/users/edit.html": templatesUsersEditHtml,
	"templates/users/new.html": templatesUsersNewHtml,
	"templates/users/user.html": templatesUsersUserHtml,
	"templates/users/users.html": templatesUsersUsersHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"items": &bintree{nil, map[string]*bintree{
			"edit.html": &bintree{templatesItemsEditHtml, map[string]*bintree{}},
			"item.html": &bintree{templatesItemsItemHtml, map[string]*bintree{}},
			"items.html": &bintree{templatesItemsItemsHtml, map[string]*bintree{}},
			"new.html": &bintree{templatesItemsNewHtml, map[string]*bintree{}},
		}},
		"users": &bintree{nil, map[string]*bintree{
			"edit.html": &bintree{templatesUsersEditHtml, map[string]*bintree{}},
			"new.html": &bintree{templatesUsersNewHtml, map[string]*bintree{}},
			"user.html": &bintree{templatesUsersUserHtml, map[string]*bintree{}},
			"users.html": &bintree{templatesUsersUsersHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

